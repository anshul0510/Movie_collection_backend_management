Project Overview:

Title: Movie Collection Management API

Description:
The Movie Collection Management API allows users to manage their movie collections, including creating, updating, and deleting collections, as well as retrieving collections with their associated movies and top 3 favorite genres.

API Endpoints:
1. User Registration:
   - Method: POST
   - URL: http://localhost:8000/register/
   - Description: Allows users to register with a username and password.
   - Body: {"username": "<username>", "password": "<password>"}
   - Response: Returns JWT tokens upon successful registration.

2. User Login:
   - Method: POST
   - URL: http://localhost:8000/login/
   - Description: Allows registered users to log in.
   - Body: {"username": "<username>", "password": "<password>"}
   - Response: Returns JWT tokens upon successful login.

3. Create Collection:
   - Method: POST
   - URL: http://localhost:8000/collection/
   - Description: Allows authenticated users to create a new collection.
   - Headers: {"Authorization": "Bearer <access_token>"}
   - Body: Include collection data (title, description, movies).
   - Response: Returns the UUID of the created collection.
   - payload: {
                    "user_id": "1",
                    "title": "hi",
                    "description": "Description",
                    "movies": [
                        {
                            "title": "Queerama",
                            "description": "50 years after decriminalisation of homosexuality in the UK, director Daisy Asquith mines the jewels of the BFI archive to take us into the relationships, desires, fears and expressions of gay men and women in the 20th century.",
                            "genres": "",
                            "uuid": "57baf4f4-c9ef-4197-9e4f-acf04eae5b4d"
                        },
                        {
                            "title": "Satana likuyushchiy",
                            "description": "In a small town live two brothers, one a minister and the other one a hunchback painter of the chapel who lives with his wife. One dreadful and stormy night, a stranger knocks at the door asking for shelter. The stranger talks about all the good things of the earthly life the minister is missing because of his puritanical faith. The minister comes to accept the stranger's viewpoint but it is others who will pay the consequences because the minister will discover the human pleasures thanks to, ehem, his sister- in -lawâ€¦ The tormented minister and his cuckolded brother will die in a strange accident in the chapel and later an infant will be born from the minister's adulterous relationship.",
                            "genres": "",
                            "uuid": "163ce013-03e2-47e9-8afd-e7de7688c151"
                        }
                    ]
                }

4. Retrieve Collections with Top 3 Favorite Genres:
   - Method: GET
   - URL: http://localhost:8000/collection/
   - Description: Allows authenticated users to retrieve their collections with top 3 favorite genres.
   - Headers: {"Authorization": "Bearer <access_token>"}
   - Response: Returns collections with top 3 favorite genres.

5. Update Collection:
   - Method: PUT
   - URL: http://localhost:8000/collection/<collection_uuid>/
   - Description: Allows authenticated users to update an existing collection.
   - Headers: {"Authorization": "Bearer <access_token>"}
   - Body: Include updated collection data (title, description, movies).
   - Response: Confirms the update.

6. Delete Collection:
   - Method: DELETE
   - URL: http://localhost:8000/collection/<collection_uuid>/
   - Description: Allows authenticated users to delete an existing collection.
   - Headers: {"Authorization": "Bearer <access_token>"}
   - Response: Confirms the deletion.

7. Request Count APIs:
    7.1 GET http://localhost:8000/request-count/
        - Description: Returns the number of requests served by the server till now.
        - Response:
            {
                "requests": <number of requests served by this server till now>
            }

    7.2 POST http://localhost:8000/request-count/reset/
        - Description: Resets the request count.
        - Response:
            {
                "message": "Request count reset successfully"
            }

Testing Instructions:
1. Register a new user using the User Registration API.
2. Log in with the registered user credentials using the User Login API.
3. Create a collection using the Create Collection API.
4. Retrieve collections with top 3 favorite genres using the Retrieve Collections API.
5. Update an existing collection using the Update Collection API.
6. Delete an existing collection using the Delete Collection API.
7. Implemented a scalable request counter middleware

Make sure to include the appropriate request data and JWT tokens in the headers for authenticated endpoints.
